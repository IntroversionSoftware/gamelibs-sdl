project('sdl3', 'c', version: '3.2.0')

compiler = meson.get_compiler('c')

incdirs = ['include', 'include/SDL3']
build_incdirs = ['src', 'include/build_config']

objc_flags = []
c_flags = []

link_deps = [
    dependency('threads'),
]

opengl = get_option('opengl')

if opengl != 'angle'
    link_deps += [ dependency('gl') ]
endif

sources = [
    'src/atomic/SDL_atomic.c',
    'src/atomic/SDL_spinlock.c',
    'src/audio/disk/SDL_diskaudio.c',
    'src/audio/dsp/SDL_dspaudio.c',
    'src/audio/dummy/SDL_dummyaudio.c',
    'src/audio/SDL_audio.c',
    'src/audio/SDL_audiocvt.c',
    'src/audio/SDL_audiodev.c',
    'src/audio/SDL_audioqueue.c',
    'src/audio/SDL_audioresample.c',
    'src/audio/SDL_audiotypecvt.c',
    'src/audio/SDL_mixer.c',
    'src/audio/SDL_wave.c',
    'src/camera/dummy/SDL_camera_dummy.c',
    'src/camera/SDL_camera.c',
    'src/core/SDL_core_unsupported.c',
    'src/cpuinfo/SDL_cpuinfo.c',
    'src/dialog/dummy/SDL_dummydialog.c',
    'src/dialog/SDL_dialog.c',
    'src/dialog/SDL_dialog_utils.c',
    'src/dynapi/SDL_dynapi.c',
    'src/events/imKStoUCS.c',
    'src/events/SDL_categories.c',
    'src/events/SDL_clipboardevents.c',
    'src/events/SDL_displayevents.c',
    'src/events/SDL_dropevents.c',
    'src/events/SDL_events.c',
    'src/events/SDL_keyboard.c',
    'src/events/SDL_keymap.c',
    'src/events/SDL_keysym_to_keycode.c',
    'src/events/SDL_keysym_to_scancode.c',
    'src/events/SDL_mouse.c',
    'src/events/SDL_pen.c',
    'src/events/SDL_quit.c',
    'src/events/SDL_scancode_tables.c',
    'src/events/SDL_touch.c',
    'src/events/SDL_windowevents.c',
    'src/filesystem/dummy/SDL_sysfilesystem.c',
    'src/filesystem/dummy/SDL_sysfsops.c',
    'src/filesystem/SDL_filesystem.c',
    'src/gpu/SDL_gpu.c',
    'src/gpu/vulkan/SDL_gpu_vulkan.c',
    'src/haptic/dummy/SDL_syshaptic.c',
    'src/haptic/SDL_haptic.c',
    'src/hidapi/SDL_hidapi.c',
    'src/io/generic/SDL_asyncio_generic.c',
    'src/io/io_uring/SDL_asyncio_liburing.c',
    'src/io/SDL_asyncio.c',
    'src/io/SDL_iostream.c',
    'src/joystick/controller_type.c',
    'src/joystick/dummy/SDL_sysjoystick.c',
    'src/joystick/hidapi/SDL_hidapi_combined.c',
    'src/joystick/hidapi/SDL_hidapi_gamecube.c',
    'src/joystick/hidapi/SDL_hidapi_luna.c',
    'src/joystick/hidapi/SDL_hidapi_ps3.c',
    'src/joystick/hidapi/SDL_hidapi_ps4.c',
    'src/joystick/hidapi/SDL_hidapi_ps5.c',
    'src/joystick/hidapi/SDL_hidapi_rumble.c',
    'src/joystick/hidapi/SDL_hidapi_shield.c',
    'src/joystick/hidapi/SDL_hidapi_stadia.c',
    'src/joystick/hidapi/SDL_hidapi_steam.c',
    'src/joystick/hidapi/SDL_hidapi_steam_hori.c',
    'src/joystick/hidapi/SDL_hidapi_steamdeck.c',
    'src/joystick/hidapi/SDL_hidapi_switch.c',
    'src/joystick/hidapi/SDL_hidapi_wii.c',
    'src/joystick/hidapi/SDL_hidapi_xbox360.c',
    'src/joystick/hidapi/SDL_hidapi_xbox360w.c',
    'src/joystick/hidapi/SDL_hidapi_xboxone.c',
    'src/joystick/hidapi/SDL_hidapijoystick.c',
    'src/joystick/SDL_gamepad.c',
    'src/joystick/SDL_joystick.c',
    'src/joystick/SDL_steam_virtual_gamepad.c',
    'src/joystick/virtual/SDL_virtualjoystick.c',
    'src/libm/e_atan2.c',
    'src/libm/e_exp.c',
    'src/libm/e_fmod.c',
    'src/libm/e_log.c',
    'src/libm/e_log10.c',
    'src/libm/e_pow.c',
    'src/libm/e_rem_pio2.c',
    'src/libm/e_sqrt.c',
    'src/libm/k_cos.c',
    'src/libm/k_rem_pio2.c',
    'src/libm/k_sin.c',
    'src/libm/k_tan.c',
    'src/libm/s_atan.c',
    'src/libm/s_copysign.c',
    'src/libm/s_cos.c',
    'src/libm/s_fabs.c',
    'src/libm/s_floor.c',
    'src/libm/s_isinf.c',
    'src/libm/s_isinff.c',
    'src/libm/s_isnan.c',
    'src/libm/s_isnanf.c',
    'src/libm/s_modf.c',
    'src/libm/s_scalbn.c',
    'src/libm/s_sin.c',
    'src/libm/s_tan.c',
    'src/loadso/dummy/SDL_sysloadso.c',
    'src/locale/dummy/SDL_syslocale.c',
    'src/locale/SDL_locale.c',
    'src/main/generic/SDL_sysmain_callbacks.c',
    'src/main/SDL_main_callbacks.c',
    'src/main/SDL_runapp.c',
    'src/misc/dummy/SDL_sysurl.c',
    'src/misc/SDL_url.c',
    'src/power/SDL_power.c',
    'src/process/dummy/SDL_dummyprocess.c',
    'src/process/SDL_process.c',
    'src/render/gpu/SDL_pipeline_gpu.c',
    'src/render/gpu/SDL_render_gpu.c',
    'src/render/gpu/SDL_shaders_gpu.c',
    'src/render/opengl/SDL_render_gl.c',
    'src/render/opengl/SDL_shaders_gl.c',
    'src/render/opengles2/SDL_render_gles2.c',
    'src/render/opengles2/SDL_shaders_gles2.c',
    'src/render/SDL_d3dmath.c',
    'src/render/SDL_render.c',
    'src/render/SDL_render_unsupported.c',
    'src/render/SDL_yuv_sw.c',
    'src/render/software/SDL_blendfillrect.c',
    'src/render/software/SDL_blendline.c',
    'src/render/software/SDL_blendpoint.c',
    'src/render/software/SDL_drawline.c',
    'src/render/software/SDL_drawpoint.c',
    'src/render/software/SDL_render_sw.c',
    'src/render/software/SDL_rotate.c',
    'src/render/software/SDL_triangle.c',
    'src/render/vulkan/SDL_render_vulkan.c',
    'src/render/vulkan/SDL_shaders_vulkan.c',
    'src/SDL.c',
    'src/SDL_assert.c',
    'src/SDL_error.c',
    'src/SDL_guid.c',
    'src/SDL_hashtable.c',
    'src/SDL_hints.c',
    'src/SDL_list.c',
    'src/SDL_log.c',
    'src/SDL_properties.c',
    'src/SDL_utils.c', 
    'src/sensor/dummy/SDL_dummysensor.c',
    'src/sensor/SDL_sensor.c',
    'src/stdlib/SDL_crc16.c',
    'src/stdlib/SDL_crc32.c',
    'src/stdlib/SDL_getenv.c',
    'src/stdlib/SDL_iconv.c',
    'src/stdlib/SDL_malloc.c',
    'src/stdlib/SDL_memcpy.c',
    'src/stdlib/SDL_memmove.c',
    'src/stdlib/SDL_memset.c',
    'src/stdlib/SDL_mslibc.c',
    'src/stdlib/SDL_murmur3.c',
    'src/stdlib/SDL_qsort.c',
    'src/stdlib/SDL_random.c',
    'src/stdlib/SDL_stdlib.c',
    'src/stdlib/SDL_string.c',
    'src/stdlib/SDL_strtokr.c',
    'src/storage/generic/SDL_genericstorage.c',
    'src/storage/SDL_storage.c',
    'src/storage/steam/SDL_steamstorage.c',
    'src/thread/SDL_thread.c',
    'src/time/SDL_time.c',
    'src/timer/SDL_timer.c',
    'src/tray/dummy/SDL_tray.c',
    'src/tray/SDL_tray_utils.c',
    'src/video/offscreen/SDL_offscreenevents.c',
    'src/video/offscreen/SDL_offscreenframebuffer.c',
    'src/video/offscreen/SDL_offscreenopengles.c',
    'src/video/offscreen/SDL_offscreenvideo.c',
    'src/video/offscreen/SDL_offscreenvulkan.c',
    'src/video/offscreen/SDL_offscreenwindow.c',
    'src/video/SDL_blit.c',
    'src/video/SDL_blit_0.c',
    'src/video/SDL_blit_1.c',
    'src/video/SDL_blit_A.c',
    'src/video/SDL_blit_auto.c',
    'src/video/SDL_blit_copy.c',
    'src/video/SDL_blit_N.c',
    'src/video/SDL_blit_slow.c',
    'src/video/SDL_bmp.c',
    'src/video/SDL_clipboard.c',
    'src/video/SDL_egl.c',
    'src/video/SDL_fillrect.c',
    'src/video/SDL_pixels.c',
    'src/video/SDL_rect.c',
    'src/video/SDL_RLEaccel.c',
    'src/video/SDL_stretch.c',
    'src/video/SDL_surface.c',
    'src/video/SDL_video.c',
    'src/video/SDL_video_unsupported.c',
    'src/video/SDL_vulkan_utils.c',
    'src/video/SDL_yuv.c',
    'src/video/yuv2rgb/yuv_rgb_lsx.c',
    'src/video/yuv2rgb/yuv_rgb_sse.c',
    'src/video/yuv2rgb/yuv_rgb_std.c',
]

if target_machine.system() != 'windows'
    link_deps += [
        compiler.find_library('m'),
    ]
    sources += [
        'src/core/unix/SDL_appid.c',
        'src/core/unix/SDL_poll.c',
        'src/dialog/unix/SDL_portaldialog.c',
        'src/dialog/unix/SDL_unixdialog.c',
        'src/dialog/unix/SDL_zenitydialog.c',
        'src/filesystem/posix/SDL_sysfsops.c',
        'src/filesystem/unix/SDL_sysfilesystem.c',
		'src/loadso/dlopen/SDL_sysloadso.c',
        'src/locale/unix/SDL_syslocale.c',
        'src/misc/unix/SDL_sysurl.c',
        'src/process/posix/SDL_posixprocess.c',
        'src/thread/pthread/SDL_syscond.c',
        'src/thread/pthread/SDL_sysmutex.c',
        'src/thread/pthread/SDL_sysrwlock.c',
        'src/thread/pthread/SDL_syssem.c',
        'src/thread/pthread/SDL_systhread.c',
        'src/thread/pthread/SDL_systls.c',
        'src/time/unix/SDL_systime.c',
        'src/timer/unix/SDL_systimer.c',
        'src/tray/unix/SDL_tray.c',
    ]
endif


if target_machine.system() == 'windows'
    link_deps += [
        compiler.find_library('version'),
        compiler.find_library('winmm'),
        compiler.find_library('imm32'),
        compiler.find_library('setupapi'),
    ]
    sources += [
        'src/audio/directsound/SDL_directsound.c',
        'src/audio/wasapi/SDL_wasapi.c',
        'src/camera/mediafoundation/SDL_camera_mediafoundation.c',
        'src/core/windows/pch.c',
        'src/core/windows/SDL_hid.c',
        'src/core/windows/SDL_immdevice.c',
        'src/core/windows/SDL_windows.c',
        'src/core/windows/SDL_xinput.c',
        'src/dialog/windows/SDL_windowsdialog.c',
        'src/filesystem/windows/SDL_sysfilesystem.c',
        'src/filesystem/windows/SDL_sysfsops.c',
		'src/gpu/d3d12/SDL_gpu_d3d12.c',
        'src/haptic/windows/SDL_dinputhaptic.c',
        'src/haptic/windows/SDL_windowshaptic.c',
        'src/hidapi/windows/hid.c',
        'src/hidapi/windows/hidapi_descriptor_reconstruct.c',
        'src/hidapi/windows/pp_data_dump/pp_data_dump.c',
        'src/hidapi/windows/test/hid_report_reconstructor_test.c',
        'src/io/windows/SDL_asyncio_windows_ioring.c',
        'src/joystick/gdk/SDL_gameinputjoystick.c',
        'src/joystick/windows/SDL_dinputjoystick.c',
        'src/joystick/windows/SDL_rawinputjoystick.c',
        'src/joystick/windows/SDL_windows_gaming_input.c',
        'src/joystick/windows/SDL_windowsjoystick.c',
        'src/joystick/windows/SDL_xinputjoystick.c',
        'src/loadso/windows/SDL_sysloadso.c',
        'src/locale/windows/SDL_syslocale.c',
        'src/main/windows/SDL_sysmain_runapp.c',
        'src/misc/windows/SDL_sysurl.c',
        'src/power/windows/SDL_syspower.c',
        'src/process/windows/SDL_windowsprocess.c',
        'src/render/direct3d/SDL_render_d3d.c',
        'src/render/direct3d/SDL_shaders_d3d.c',
        'src/render/direct3d11/SDL_render_d3d11.c',
        'src/render/direct3d11/SDL_shaders_d3d11.c',
        'src/render/direct3d12/SDL_render_d3d12.c',
        'src/render/direct3d12/SDL_shaders_d3d12.c',
        'src/sensor/windows/SDL_windowssensor.c',
        'src/thread/windows/SDL_syscond_cv.c',
        'src/thread/windows/SDL_sysmutex.c',
        'src/thread/windows/SDL_sysrwlock_srw.c',
        'src/thread/windows/SDL_syssem.c',
        'src/thread/windows/SDL_systhread.c',
        'src/thread/windows/SDL_systls.c',
        'src/time/windows/SDL_systime.c',
        'src/timer/windows/SDL_systimer.c',
        'src/tray/windows/SDL_tray.c',
        'src/video/windows/SDL_surface_utils.c',
        'src/video/windows/SDL_windowsclipboard.c',
        'src/video/windows/SDL_windowsevents.c',
        'src/video/windows/SDL_windowsframebuffer.c',
        'src/video/windows/SDL_windowsgameinput.c',
        'src/video/windows/SDL_windowskeyboard.c',
        'src/video/windows/SDL_windowsmessagebox.c',
        'src/video/windows/SDL_windowsmodes.c',
        'src/video/windows/SDL_windowsmouse.c',
        'src/video/windows/SDL_windowsopengl.c',
        'src/video/windows/SDL_windowsopengles.c',
        'src/video/windows/SDL_windowsrawinput.c',
        'src/video/windows/SDL_windowsshape.c',
        'src/video/windows/SDL_windowsvideo.c',
        'src/video/windows/SDL_windowsvulkan.c',
        'src/video/windows/SDL_windowswindow.c',
    ]
endif

if target_machine.system() == 'linux'
    if get_option('wayland')
        dep_wl_scanner = dependency('wayland-scanner', native: true)
        wayland_client = dependency('wayland-client')
        wayland_scanner = find_program(dep_wl_scanner.get_pkgconfig_variable('wayland_scanner'))

        protocols = [
            'wayland-protocols/alpha-modifier-v1.xml',
            'wayland-protocols/cursor-shape-v1.xml',
            'wayland-protocols/fractional-scale-v1.xml',
            'wayland-protocols/frog-color-management-v1.xml',
            'wayland-protocols/idle-inhibit-unstable-v1.xml',
            'wayland-protocols/input-timestamps-unstable-v1.xml',
            'wayland-protocols/keyboard-shortcuts-inhibit-unstable-v1.xml',
            'wayland-protocols/pointer-constraints-unstable-v1.xml',
            'wayland-protocols/primary-selection-unstable-v1.xml',
            'wayland-protocols/relative-pointer-unstable-v1.xml',
            'wayland-protocols/tablet-v2.xml',
            'wayland-protocols/text-input-unstable-v3.xml',
            'wayland-protocols/viewporter.xml',
            'wayland-protocols/wayland.xml',
            'wayland-protocols/xdg-activation-v1.xml',
            'wayland-protocols/xdg-decoration-unstable-v1.xml',
            'wayland-protocols/xdg-dialog-v1.xml',
            'wayland-protocols/xdg-foreign-unstable-v2.xml',
            'wayland-protocols/xdg-output-unstable-v1.xml',
            'wayland-protocols/xdg-shell.xml',
            'wayland-protocols/xdg-toplevel-icon-v1.xml',
        ]

        wl_protos_src = []
        wl_protos_headers = []

        foreach xml : protocols
            wl_protos_src += custom_target(
                xml.underscorify() + '_server_c',
                input: xml,
                output: '@BASENAME@-protocol.c',
                command: [wayland_scanner, 'private-code', '@INPUT@', '@OUTPUT@'],
            )
            wl_protos_headers += custom_target(
                xml.underscorify() + '_server_h',
                input: xml,
                output: '@BASENAME@-protocol.h',
                command: [wayland_scanner, 'server-header', '@INPUT@', '@OUTPUT@'],
            )
        endforeach

        foreach xml : protocols
            wl_protos_headers += custom_target(
                xml.underscorify() + '_client_h',
                input: xml,
                output: '@BASENAME@-client-protocol.h',
                command: [wayland_scanner, 'client-header', '@INPUT@', '@OUTPUT@'],
            )
        endforeach

        lib_client_protos = static_library(
            'sdl_client_protos',
            wl_protos_src + wl_protos_headers,
            dependencies: wayland_client.partial_dependency(compile_args: true),
        )

        client_protos = declare_dependency(
            link_with: lib_client_protos,
            sources: wl_protos_headers,
        )
        link_deps += [
            client_protos,
        ]
        c_flags += ['-DENABLE_WAYLAND_SUPPORT']
    endif

    c_flags += ['-D_LARGEFILE64_SOURCE', '-D_GNU_SOURCE']

    link_deps += [
        dependency('dbus-1'),
        dependency('egl'),
        dependency('ext2fs'),
        dependency('gbm'),
        dependency('libdrm'),
        dependency('libudev'),
        dependency('libpipewire-0.3'),
        compiler.find_library('dl'),
    ]

    sources += [
        'src/audio/alsa/SDL_alsa_audio.c',
        'src/audio/pipewire/SDL_pipewire.c',
        'src/audio/pulseaudio/SDL_pulseaudio.c',
        'src/camera/pipewire/SDL_camera_pipewire.c',
        'src/camera/v4l2/SDL_camera_v4l2.c',
        'src/core/linux/SDL_dbus.c',
        'src/core/linux/SDL_evdev.c',
        'src/core/linux/SDL_evdev_capabilities.c',
        'src/core/linux/SDL_evdev_kbd.c',
        'src/core/linux/SDL_fcitx.c',
        'src/core/linux/SDL_ibus.c',
        'src/core/linux/SDL_ime.c',
        'src/core/linux/SDL_system_theme.c',
        'src/core/linux/SDL_threadprio.c',
        'src/core/linux/SDL_udev.c',
        'src/haptic/linux/SDL_syshaptic.c',
        #'src/hidapi/libusb/hid.c',
        'src/hidapi/linux/hid.c',
        'src/joystick/linux/SDL_sysjoystick.c',
        'src/video/kmsdrm/SDL_kmsdrmdyn.c',
        'src/video/kmsdrm/SDL_kmsdrmevents.c',
        'src/video/kmsdrm/SDL_kmsdrmmouse.c',
        'src/video/kmsdrm/SDL_kmsdrmopengles.c',
        'src/video/kmsdrm/SDL_kmsdrmvideo.c',
        'src/video/kmsdrm/SDL_kmsdrmvulkan.c',
        'src/video/wayland/SDL_waylandclipboard.c',
        'src/video/wayland/SDL_waylanddatamanager.c',
        'src/video/wayland/SDL_waylanddyn.c',
        'src/video/wayland/SDL_waylandevents.c',
        'src/video/wayland/SDL_waylandkeyboard.c',
        'src/video/wayland/SDL_waylandmessagebox.c',
        'src/video/wayland/SDL_waylandmouse.c',
        'src/video/wayland/SDL_waylandopengles.c',
        'src/video/wayland/SDL_waylandshmbuffer.c',
        'src/video/wayland/SDL_waylandvideo.c',
        'src/video/wayland/SDL_waylandvulkan.c',
        'src/video/wayland/SDL_waylandwindow.c',
        'src/video/x11/edid-parse.c',
        'src/video/x11/SDL_x11clipboard.c',
        'src/video/x11/SDL_x11dyn.c',
        'src/video/x11/SDL_x11events.c',
        'src/video/x11/SDL_x11framebuffer.c',
        'src/video/x11/SDL_x11keyboard.c',
        'src/video/x11/SDL_x11messagebox.c',
        'src/video/x11/SDL_x11modes.c',
        'src/video/x11/SDL_x11mouse.c',
        'src/video/x11/SDL_x11opengl.c',
        'src/video/x11/SDL_x11opengles.c',
        'src/video/x11/SDL_x11pen.c',
        'src/video/x11/SDL_x11settings.c',
        'src/video/x11/SDL_x11shape.c',
        'src/video/x11/SDL_x11touch.c',
        'src/video/x11/SDL_x11video.c',
        'src/video/x11/SDL_x11vulkan.c',
        'src/video/x11/SDL_x11window.c',
        'src/video/x11/SDL_x11xfixes.c',
        'src/video/x11/SDL_x11xinput2.c',
        'src/video/x11/SDL_x11xsync.c',
        'src/video/x11/xsettings-client.c',
    ]
endif


if target_machine.system() == 'darwin'
    add_languages('objc', required: true)
    objc_flags += [ '-fobjc-weak', '-fobjc-arc' ]
    build_incdirs += [ 'src/video/khronos' ]
    link_deps += [
        dependency('Carbon'),
        dependency('Cocoa'),
        dependency('CoreGraphics'),
        dependency('CoreHaptics'),
        dependency('CoreVideo'),
        dependency('ForceFeedback'),
        dependency('GameController'),
        dependency('IOKit'),
        dependency('Metal'),
        dependency('OpenGL'),
        dependency('QuartzCore'),
        dependency('UniformTypeIdentifiers'),
    ]
    sources += [
        'src/audio/coreaudio/SDL_coreaudio.m',
        'src/camera/coremedia/SDL_camera_coremedia.m',
        'src/dialog/cocoa/SDL_cocoadialog.m',
        'src/filesystem/cocoa/SDL_sysfilesystem.m',
        'src/gpu/metal/SDL_gpu_metal.m',
        'src/haptic/darwin/SDL_syshaptic.c',
        'src/hidapi/ios/hid.m',
        'src/hidapi/mac/hid.c',
        'src/joystick/apple/SDL_mfijoystick.m',
        'src/joystick/darwin/SDL_iokitjoystick.c',
        'src/locale/macos/SDL_syslocale.m',
        'src/misc/macos/SDL_sysurl.m',
        'src/power/macos/SDL_syspower.c',
        'src/power/uikit/SDL_syspower.m',
        'src/render/metal/SDL_render_metal.m',
        'src/sensor/coremotion/SDL_coremotionsensor.m',
        'src/tray/cocoa/SDL_tray.m',
        'src/video/cocoa/SDL_cocoaclipboard.m',
        'src/video/cocoa/SDL_cocoaevents.m',
        'src/video/cocoa/SDL_cocoakeyboard.m',
        'src/video/cocoa/SDL_cocoamessagebox.m',
        'src/video/cocoa/SDL_cocoametalview.m',
        'src/video/cocoa/SDL_cocoamodes.m',
        'src/video/cocoa/SDL_cocoamouse.m',
        'src/video/cocoa/SDL_cocoaopengl.m',
        'src/video/cocoa/SDL_cocoaopengles.m',
        'src/video/cocoa/SDL_cocoapen.m',
        'src/video/cocoa/SDL_cocoashape.m',
        'src/video/cocoa/SDL_cocoavideo.m',
        'src/video/cocoa/SDL_cocoavulkan.m',
        'src/video/cocoa/SDL_cocoawindow.m',
        'src/video/uikit/SDL_uikitappdelegate.m',
        'src/video/uikit/SDL_uikitclipboard.m',
        'src/video/uikit/SDL_uikitevents.m',
        'src/video/uikit/SDL_uikitmessagebox.m',
        'src/video/uikit/SDL_uikitmetalview.m',
        'src/video/uikit/SDL_uikitmodes.m',
        'src/video/uikit/SDL_uikitopengles.m',
        'src/video/uikit/SDL_uikitopenglview.m',
        'src/video/uikit/SDL_uikitpen.m',
        'src/video/uikit/SDL_uikitvideo.m',
        'src/video/uikit/SDL_uikitview.m',
        'src/video/uikit/SDL_uikitviewcontroller.m',
        'src/video/uikit/SDL_uikitvulkan.m',
        'src/video/uikit/SDL_uikitwindow.m',
    ]
endif

incdirs = include_directories(incdirs)
build_incdirs = include_directories(build_incdirs)

sdl = static_library(
    'sdl3',
    sources,
    include_directories: [incdirs, build_incdirs],
    c_args: c_flags,
    dependencies: link_deps,
    objc_args: objc_flags,
)

sdl_dep = declare_dependency(
    include_directories: incdirs,
    dependencies: link_deps,
    link_with: sdl,
    version: meson.project_version()
)

meson.override_dependency('sdl3', sdl_dep)

# vim: set ts=4 sts=4 sw=4 et:
